using System;
using System.Diagnostics;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;

namespace AB.Middleware.HttpRequestLogging
{
    /// <summary>
    /// This middleware emits a single log event per HTTP request, and helps to eliminate alot of the noise generated by the framework
    /// during the beginning and end of an HTTP request.  It's recommended to increase log levels for Microsoft/AspNetCore namespace events.
    /// Be aware that unhandled errors that flow through this middleware WILL be logged at the <see cref="LogLevel.Information"/> level.
    /// The intent of this middleware is to capture summary information about your request, even in the scenario of an unhandled error.
    /// It does not assume responsibility for global error handling, but will report a <see cref="StatusCodes.Status500InternalServerError"/>.
    /// </summary>
    public class HttpRequestLoggingMiddleware
    {
        public const string MessageTemplate = "HTTP {RequestMethod} {RequestPath} responded {StatusCode} in {ElapsedMilliseconds} ms";

        private readonly ILogger<HttpRequestLoggingMiddleware> _logger;
        private readonly RequestDelegate _next;

        public HttpRequestLoggingMiddleware(RequestDelegate next, ILogger<HttpRequestLoggingMiddleware> logger)
        {
            _next = next ?? throw new ArgumentNullException(nameof(next));
            _logger = logger;
        }

        public async Task Invoke(HttpContext httpContext)
        {
            if (httpContext == null) throw new ArgumentNullException(nameof(httpContext));
            //_logger.LogTrace("ApiVersion {apiVersion} detected", httpContext.GetRequestedApiVersion().ToString());// is this the best place for this?

            var sw = Stopwatch.StartNew();
            try
            {
                await _next(httpContext);
                sw.Stop();

                int? statusCode = httpContext.Response?.StatusCode;
                _logger.LogInformation(MessageTemplate, httpContext.Request.Method, httpContext.Request.Path, httpContext.Response.StatusCode, sw.Elapsed.TotalMilliseconds);
            }
            // Never caught - LogException returns false.  The 'when' keyword avoids unwinding the stack and reduces perf impact
            // https://www.thomaslevesque.com/2015/06/21/exception-filters-in-c-6/
            catch (Exception e) when (LogException(httpContext, sw, e)) { }
        }

        private bool LogException(HttpContext httpContext, Stopwatch sw, Exception ex)
        {
            sw.Stop();
            _logger.LogInformation(MessageTemplate, httpContext.Request.Method, httpContext.Request.Path, 500, sw.Elapsed.TotalMilliseconds);
            return false;
        }
    }
}
